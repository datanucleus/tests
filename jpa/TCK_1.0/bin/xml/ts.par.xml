<?xml version="1.0"?>
<project name="ParImport" basedir="." default="usage">

    <!-- IMPORTS -->
    <import file="${ts.home}/bin/xml/ts.common.xml"/>

    <!-- LOCAL PROPERTY DEFINITIONS -->
    
    <!-- MACROS -->
    <macrodef name="ts.par">

    <!--
        The ts.par task allows users to build persistence archives.  By default all
        classes under TS_HOME/classes/<pkg.dir> are included in the generated archive.
        Users may specify additional content using nested fileset and zipfileset elements.
        User may also tweak the contents of the generated archive by specifying various
        attribute values, see the attribute and element tables for details.

        Examples:

        <ts.par descriptor="ejb_sam_Hello_persistence.xml" 
                archivename="ejb_sam_Hello"/>

        This example builds a persistence archive named ejb_sam_Hello.jar.  The deployment
        descriptor in the persistence archive, persistence.xml, is specified using the
        descriptor attribute.  Note, the ejb_sam_Hello_persistence.xml file ends up in
        the presistence archive as the META-INF/persistence.xml with no diffs.  The
        classes added to the archive are the default classes,
        TS_HOME/classes/<pkg.dir>/**/*.class.  Where <pkg.dir> is the package name of
        the test being built.
 

        <ts.par descriptor="ejb_sam_Hello_persistence.xml" 
                archivename="ejb_sam_Hello"/>
          <fileset dir="TS_HOME/classes" includes="<some-package>/*.class"/>
          <fileset dir="TS_HOME/classes" includes="<some-other-package>/*.class"/>
        </ts.par>

        This example is the same as the previous example except the user has opted to add
        additional classes in addition to the default classes.  The additional classes are
        specified using nested fileset elements.  Note, users may specify additional classes
        using nested fileset or zipfileset elements.


        <ts.par descriptor="ejb_sam_Hello_persistence.xml" 
                archivename="ejb_sam_Hello"/>
                includedefaultfiles="false">
          <fileset dir="TS_HOME/classes" includes="<some-package>/*.class"/>
          <fileset dir="TS_HOME/classes" includes="<some-other-package>/*.class"/>
        </ts.par>

        This example is the same as the previous example except the user has opted
        to add additional classes instead of the default classes.  The additional classes
        are specified using nested fileset elements.  Note, users may specify additional
        classes using nested fileset or zipfileset elements.


        <ts.par descriptor="ejb_sam_Hello_persistence.xml" 
                archivename="ejb_sam_Hello"/>
                excludedfiles="${pkg.dir}/B*.class>
        </ts.par>

        This example excludes all class files that start with "B" that live in the
        TS_HOME/classes/${pkg.dir}.  If the TS_HOME/classes/${pkg.dir} contained the classes A.class,
        B1.class, B2.class and C.class only classes A and C would end up in the archive.  Using the
        excludedfiles attribute is another way of customizing the content of the archive by excluding
        some of the default content.  Users can also use the includedefaultfiles attribute to exclude
        all default content but the user must then use nested filesets and or zipfilesets to include
        the appropriate content.  Using the excludedfiles attribute may be simpler in some cases.

        To continue this example, the following XML does the exact same thing as the example above
        but it uses the includedefaultfiles attribute and a nested fileset element.

        <ts.par descriptor="ejb_sam_Hello_persistence.xml" 
                archivename="ejb_sam_Hello"/>
                includedefaultfiles="false">
          <fileset dir="TS_HOME/classes" includes="${pkg.dir}/A.class, ${pkg.dir}/C.class"/>
        </ts.par>

      -->

        <attribute name="descriptor"
                   default=""        
                   description="Deployment descriptor added to the archive if the archive requires a deployment descriptor"/>
                              
        <attribute name="manifest"
                   default=""
                   description="Manifest to be used within the archive"/>
        
        <attribute name="archivename"   
                   description="Archive name minus the file suffix"/>
                   
        <attribute name="descriptordir"
                   default="${src.dir}/${pkg.dir}"
                   description="Directory containing the deployment descriptor"/>           
        
        <attribute name="includedefaultfiles"
                   default="true"
                   description="Include default files in the component archive"/>

        <attribute name="excludedfiles"
                   default=""
                   description="A comma separated list of file expressions to exclude from the set of default included files.  This list of file expressions is relative to the TS_HOME/classes directory."/>

        <element name="jar-elements" implicit="yes" optional="true"
                 description="The content to be added to the archive"/>
        
        <sequential>
        
        <!-- steps for standalone TCK only -->
        <if>
         <equals arg1="${deliverable.class}" arg2="com.sun.ts.lib.deliverable.jpa.JPADeliverable" />
         <then>
           <echo message="Tests are running in Java SE environment, since deliverable.class is set to: ${deliverable.class}" />
          <antcall target="modify-persistence-xml"> 
            <param name="original.persistence.xml.file" value="@{descriptordir}/@{descriptor}"/>
          </antcall>
          <dirname property="effective.descriptordir" file="${modified.persistence.xml.file}"/>
          <basename property="effective.descriptor" file="${modified.persistence.xml.file}"/>
         </then>
         <else>
           <property name="effective.descriptordir" value="@{descriptordir}"/>
           <property name="effective.descriptor" value="@{descriptor}"/>
         </else>
        </if>
        <!-- end of steps for standalone TCK only -->
            
        <!-- Define commmon preset regardless of includedefaultfiles value-->
        <presetdef name="component.par">
            <_component descriptor="${effective.descriptor}"
                       manifest="@{manifest}"
                       archivename="@{archivename}"
                       archivesuffix=".jar"
                       descriptordir="${effective.descriptordir}"
                       internaldescriptorname="META-INF/persistence.xml">
            </_component>
        </presetdef>
        
        <if>
          <istrue value="@{includedefaultfiles}"/>
        <then>
          <component.par>
              <fileset dir="${class.dir}"
                       includes="${pkg.dir}/**/*.class"
                       excludes="${pkg.dir}/*lient*.class, @{excludedfiles}"/>
              <jar-elements/>
          </component.par>
        </then>
        <else>
          <component.par>
            <jar-elements/>
          </component.par>
        </else>
        </if>

        <!-- steps for standalone TCK only -->
        <if>
         <equals arg1="${deliverable.class}" arg2="com.sun.ts.lib.deliverable.jpa.JPADeliverable" />
         <then>
           <echo message="In standalone TCK mode, about to delete entity classes from ${ts.home}/classes:${par.classes}"/>
           <delete failonerror="true">
             <fileset dir="${ts.home}/classes" includes="${par.classes}"/>
           </delete>
         </then>
        </if>
        <!-- end of steps for standalone TCK only -->

        </sequential>
    </macrodef>
    
    <!-- PRESETS -->
    
    <!-- TARGETS -->
    <!-- The following targets and properties are currently used only when building
         the standalone TCK -->
     
   <taskdef name="modifyxml" classname="com.sun.ant.taskdefs.xml.ModifyXML"/>

   <property name="persistence.xml.class.elements.file" value="/tmp/xml-fragment"/>
   <property name="modified.persistence.xml.file" value="/tmp/modified.persistence.xml"/>

    <target name="printme">
      <property name="p" value=""/>
      <echo message="&lt;class&gt;${p}&lt;/class&gt;"
            file="${persistence.xml.class.elements.file}" append="true"/>
    </target>

    <target name="modify-persistence-xml">
      <delete file="${persistence.xml.class.elements.file}" quiet="true"/>
      <delete file="${modified.persistence.xml.file}" quiet="true"/>

      <propertyregex property="par.classes.no.dot.class" input="${par.classes}" 
                     regexp="\.class" replace=""
                     casesensitive="true" override="true"/>

      <propertyregex property="par.classes.canonical" input="${par.classes.no.dot.class}" 
                     regexp="[\/|\\]" replace="\."
                     casesensitive="true" override="true"/>

      <echo message="&lt;classes&gt;" file="${persistence.xml.class.elements.file}" append="true"/>
      <foreach list="${par.classes.canonical}" delimiter="," target="printme" param="p"/>
      <echo message="&lt;/classes&gt;" file="${persistence.xml.class.elements.file}" append="true"/>

      <property name="original.persistence.xml.file" value="NOT-SET"/>
      <echo message="About to modify: ${original.persistence.xml.file}"/>
      <loadfile property="xml.fragment" srcfile="${persistence.xml.class.elements.file}"/>
      <echo message="${xml.fragment}"/>
      <modifyxml infile="${original.persistence.xml.file}"
                 outfile="${modified.persistence.xml.file}"
                 defaultnsprefix="ee-persitence"
                 xpathexpr="//ee-persitence:persistence-unit">
      <xmlfragment ignoreroot="true" xmlfragmentattribute="${xml.fragment}"/>
      </modifyxml>
    </target>

</project>
